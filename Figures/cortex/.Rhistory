genespaceARIs = rbind(genespaceARIs, read.csv('genespaceARIs_competitors.csv'))[-1]
getlink = function(method, type) paste0(method, "_", type, '.csv')
getplots = function(data, batch_indicator = 'Sequencing Method'){
myplot_type =
ggplot(data) +
geom_point(aes(x = UMAP1, y = UMAP2, color = Cell.Type), size = 0.5) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
myplot_batch =
ggplot(data) +
geom_point(aes(x = UMAP1, y = UMAP2, color = Sequencing.Method), size = 0.5) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
return(list(myplot_type, myplot_batch))
}
genespace_HVG = genespaceARIs[genespaceARIs$Type == 'HVG',]
UMAPs = list(rep(0, nrow(genespace_HVG)))
for(method in genespace_HVG$Method) {
link = getlink(method, type = 'HVG')
UMAP_data = read.csv(link, row.names = NULL)[-1]
getplots(UMAP_data)
}
UMAPs[[0]][[0]]
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
suppressPackageStartupMessages(library(knitr))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(png))
suppressPackageStartupMessages(library(RANN))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(kableExtra))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(vioplot))
suppressPackageStartupMessages(library(RColorBrewer))
genespaceARIs = read.csv('genespaceARIs.csv')
genespaceARIs = rbind(genespaceARIs, read.csv('genespaceARIs_competitors.csv'))[-1]
getlink = function(method, type) paste0(method, "_", type, '.csv')
getplots = function(data, batch_indicator = 'Sequencing Method'){
myplot_type =
ggplot(data) +
geom_point(aes(x = UMAP1, y = UMAP2, color = Cell.Type), size = 0.5) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
myplot_batch =
ggplot(data) +
geom_point(aes(x = UMAP1, y = UMAP2, color = Sequencing.Method), size = 0.5) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
return(list(myplot_type, myplot_batch))
}
genespace_HVG = genespaceARIs[genespaceARIs$Type == 'HVG',]
UMAPs = list(rep(0, nrow(genespace_HVG)))
for(method in genespace_HVG$Method) {
link = getlink(method, type = 'HVG')
UMAP_data = read.csv(link, row.names = NULL)[-1]
UMAPs[[i]] = getplots(UMAP_data)
}
UMAPs[[0]][[0]]
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
suppressPackageStartupMessages(library(knitr))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(png))
suppressPackageStartupMessages(library(RANN))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(kableExtra))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(vioplot))
suppressPackageStartupMessages(library(RColorBrewer))
genespaceARIs = read.csv('genespaceARIs.csv')
genespaceARIs = rbind(genespaceARIs, read.csv('genespaceARIs_competitors.csv'))[-1]
getlink = function(method, type) paste0(method, "_", type, '.csv')
getplots = function(data, batch_indicator = 'Sequencing Method'){
myplot_type =
ggplot(data) +
geom_point(aes(x = UMAP1, y = UMAP2, color = Cell.Type), size = 0.5) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
myplot_batch =
ggplot(data) +
geom_point(aes(x = UMAP1, y = UMAP2, color = Sequencing.Method), size = 0.5) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
return(list(myplot_type, myplot_batch))
}
genespace_HVG = genespaceARIs[genespaceARIs$Type == 'HVG',]
UMAPs = list(rep(0, nrow(genespace_HVG)))
for(method in genespace_HVG$Method) {
link = getlink(method, type = 'HVG')
UMAP_data = read.csv(link, row.names = NULL)[-1]
UMAPs[[method]] = getplots(UMAP_data)
}
UMAPs
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
suppressPackageStartupMessages(library(knitr))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(png))
suppressPackageStartupMessages(library(RANN))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(kableExtra))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(vioplot))
suppressPackageStartupMessages(library(RColorBrewer))
genespaceARIs = read.csv('genespaceARIs.csv')
genespaceARIs = rbind(genespaceARIs, read.csv('genespaceARIs_competitors.csv'))[-1]
getlink = function(method, type) paste0(method, "_", type, '.csv')
getplots = function(data, batch_indicator = 'Sequencing Method'){
myplot_type =
ggplot(data) +
geom_point(aes(x = UMAP1, y = UMAP2, color = Cell.Type), size = 0.5) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
myplot_batch =
ggplot(data) +
geom_point(aes(x = UMAP1, y = UMAP2, color = Sequencing.Method), size = 0.5) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
return(list(myplot_type, myplot_batch))
}
genespace_HVG = genespaceARIs[genespaceARIs$Type == 'HVG',]
UMAPs = list()
for(method in genespace_HVG$Method) {
link = getlink(method, type = 'HVG')
UMAP_data = read.csv(link, row.names = NULL)[-1]
UMAPs[[method]] = getplots(UMAP_data)
}
UMAPs
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
suppressPackageStartupMessages(library(knitr))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(png))
suppressPackageStartupMessages(library(RANN))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(kableExtra))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(vioplot))
suppressPackageStartupMessages(library(RColorBrewer))
genespaceARIs = read.csv('genespaceARIs.csv')
genespaceARIs = rbind(genespaceARIs, read.csv('genespaceARIs_competitors.csv'))[-1]
getlink = function(method, type) paste0(method, "_", type, '.csv')
getplots = function(data, batch_indicator = 'Sequencing Method'){
myplot_type =
ggplot(data) +
geom_point(aes(x = UMAP1, y = UMAP2, color = Cell.Type), size = 0.5) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
myplot_batch =
ggplot(data) +
geom_point(aes(x = UMAP1, y = UMAP2, color = Sequencing.Method), size = 0.5) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
return(list(myplot_type, myplot_batch))
}
genespace_HVG = genespaceARIs[genespaceARIs$Type == 'HVG',]
UMAPs_HVG = list()
UMAPs_LVG = list()
for(method in genespace_HVG$Method) {
link = getlink(method, type = 'HVG')
UMAP_data = read.csv(link, row.names = NULL)[-1]
UMAPs_HVG[[method]] = getplots(UMAP_data)
link = getlink(method, type = 'LVG')
UMAP_data = read.csv(link, row.names = NULL)[-1]
UMAPs_LVG[[method]] = getplots(UMAP_data)
}
UMAPs_LVG
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
suppressPackageStartupMessages(library(knitr))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(png))
suppressPackageStartupMessages(library(RANN))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(kableExtra))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(vioplot))
suppressPackageStartupMessages(library(RColorBrewer))
genespaceARIs = read.csv('genespaceARIs.csv')
genespaceARIs = rbind(genespaceARIs, read.csv('genespaceARIs_competitors.csv'))[-1]
getlink = function(method, type) paste0(method, "_", type, '.csv')
getplots = function(data, batch_indicator = 'Sequencing Method'){
myplot_type =
ggplot(data) +
geom_point(aes(x = UMAP1, y = UMAP2, color = Cell.Type), size = 0.5) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
myplot_batch =
ggplot(data) +
geom_point(aes(x = UMAP1, y = UMAP2, color = Sequencing.Method), size = 0.5) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
return(list(myplot_type, myplot_batch))
}
genespace_HVG = genespaceARIs[genespaceARIs$Type == 'HVG',]
UMAPs_HVG = list()
UMAPs_LVG = list()
for(method in genespace_HVG$Method) {
link = getlink(method, type = 'HVG')
UMAP_data = read.csv(link, row.names = NULL)[-1]
UMAPs_HVG[[method]] = getplots(UMAP_data)
link = getlink(method, type = 'LVG')
UMAP_data = read.csv(link, row.names = NULL)[-1]
UMAPs_LVG[[method]] = getplots(UMAP_data)
}
UMAPs_LVG
help("theme")
for(i in c(1:length((UMAPs_LVG)))) {
UMAPs_LVG[[i]]
}
names(UMAPs_LVG)
for(i in names(UMAP_LVG)) {
UMAPs_LVG[[i]]
}
for(i in names(UMAPs_LVG)) {
UMAPs_LVG[[i]]
}
for(i in names(UMAPs_LVG)) {
UMAPs_LVG[[i]]
}
for(i in names(UMAPs_LVG)) {
UMAPs_LVG$i
}
UMAPs_LVG$Raw
p2b=egg::ggarrange(plots=UMAPs_HVG,ncol = sum(genespaceARIs$Type == 'HVG'),draw = T)
p2b
library(egg)
help("ggarrange")
do.call(ggarrange,as.list(UMAPs_HVG, sum(genespaceARIs$Type == 'HVG'), T))
for(method in genespace_HVG$Method) {
link = getlink(method, type = 'HVG')
UMAP_data = read.csv(link, row.names = NULL)[-1]
UMAPs[[method]] = getplots(UMAP_data)
}
p2b=egg::ggarrange(plots=UMAPs_HVG,ncol = sum(genespaceARIs$Type == 'HVG'),draw = T)
p2b
do.call(ggarrange,as.list(UMAPs_HVG, sum(genespaceARIs$Type == 'HVG'), T))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
suppressPackageStartupMessages(library(knitr))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(png))
suppressPackageStartupMessages(library(RANN))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(kableExtra))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(vioplot))
suppressPackageStartupMessages(library(RColorBrewer))
genespaceARIs = read.csv('genespaceARIs.csv')
genespaceARIs = rbind(genespaceARIs, read.csv('genespaceARIs_competitors.csv'))[-1]
getlink = function(method, type) paste0(method, "_", type, '.csv')
getplots = function(data, batch_indicator = NA){
if is.na(batch_indicator) {
myplot =
ggplot(data) +
geom_point(aes(x = UMAP1, y = UMAP2, color = Cell.Type), size = 0.5) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
} else{
myplot =
ggplot(data) +
geom_point(aes_string(x = "UMAP1", y = "UMAP2", color = batch_indicator), size = 0.5) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
}
return(myplot)
}
genespace_HVG = genespaceARIs[genespaceARIs$Type == 'HVG',]
UMAPs = list()
for(method in genespace_HVG$Method) {
link = getlink(method, type = 'HVG')
UMAP_data = read.csv(link, row.names = NULL)[-1]
UMAPs[[method]] = getplots(UMAP_data)
}
p2b=egg::ggarrange(plots=UMAPs_HVG,ncol = sum(genespaceARIs$Type == 'HVG'),draw = T)
p2b
do.call(ggarrange,as.list(UMAPs_HVG, sum(genespaceARIs$Type == 'HVG'), T))
p2b=egg::ggarrange(plots=UMAPs,ncol = sum(genespaceARIs$Type == 'HVG'),draw = T)
p2b
UMAPs
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
suppressPackageStartupMessages(library(knitr))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(png))
suppressPackageStartupMessages(library(RANN))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(kableExtra))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(vioplot))
suppressPackageStartupMessages(library(RColorBrewer))
genespaceARIs = read.csv('genespaceARIs.csv')
genespaceARIs = rbind(genespaceARIs, read.csv('genespaceARIs_competitors.csv'))[-1]
getlink = function(method, type) paste0(method, "_", type, '.csv')
getplots = function(data, batch_indicator = NA){
if(is.na(batch_indicator)) {
myplot =
ggplot(data) +
geom_point(aes(x = UMAP1, y = UMAP2, color = Cell.Type), size = 0.5) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
} else{
myplot =
ggplot(data) +
geom_point(aes_string(x = "UMAP1", y = "UMAP2", color = batch_indicator), size = 0.5) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
}
return(myplot)
}
genespace_HVG = genespaceARIs[genespaceARIs$Type == 'HVG',]
UMAPs = list()
for(method in genespace_HVG$Method) {
link = getlink(method, type = 'HVG')
UMAP_data = read.csv(link, row.names = NULL)[-1]
UMAPs[[method]] = getplots(UMAP_data)
}
p2b=egg::ggarrange(plots=UMAPs,ncol = sum(genespaceARIs$Type == 'HVG'),draw = T)
p2b
UMAPs
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
suppressPackageStartupMessages(library(knitr))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(png))
suppressPackageStartupMessages(library(RANN))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(kableExtra))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(vioplot))
suppressPackageStartupMessages(library(RColorBrewer))
genespaceARIs = read.csv('genespaceARIs.csv')
genespaceARIs = rbind(genespaceARIs, read.csv('genespaceARIs_competitors.csv'))[-1]
getlink = function(method, type) paste0(method, "_", type, '.csv')
getplots = function(data, batch_indicator = NA){
if(is.na(batch_indicator)) {
myplot =
ggplot(data) +
geom_point(aes(x = UMAP1, y = UMAP2, color = Cell.Type), size = 0.5) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
} else{
myplot =
ggplot(data) +
geom_point(aes_string(x = "UMAP1", y = "UMAP2", color = batch_indicator), size = 0.5) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
}
return(myplot)
}
methods = unique(genespaceARIs$Method)
UMAPs = list()
for(i in length(methods)) {
link = getlink(method, type = 'HVG')
UMAP_data = read.csv(link, row.names = NULL)[-1]
UMAPs[[i]] = getplots(UMAP_data)
}
for(i in length(methods)) {
link = getlink(method, type = 'HVG')
UMAP_data = read.csv(link, row.names = NULL)[-1]
UMAPs[[i +length(methods)]] = getplots(UMAP_data, batch_indicator = 'Sequencing.Method')
}
for(i in length(methods)) {
link = getlink(method, type = 'LVG')
UMAP_data = read.csv(link, row.names = NULL)[-1]
UMAPs[[i + 2*length(methods)]] = getplots(UMAP_data)
}
for(i in length(methods)) {
link = getlink(method, type = 'LVG')
UMAP_data = read.csv(link, row.names = NULL)[-1]
UMAPs[[i + 3*length(methods)]] = getplots(UMAP_data, batch_indicator = 'Sequencing.Method')
}
p2b=egg::ggarrange(plots=UMAPs,ncol = sum(genespaceARIs$Type == 'HVG'),draw = T)
p2b
UMAPs
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
suppressPackageStartupMessages(library(knitr))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(png))
suppressPackageStartupMessages(library(RANN))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(kableExtra))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(vioplot))
suppressPackageStartupMessages(library(RColorBrewer))
genespaceARIs = read.csv('genespaceARIs.csv')
genespaceARIs = rbind(genespaceARIs, read.csv('genespaceARIs_competitors.csv'))[-1]
getlink = function(method, type) paste0(method, "_", type, '.csv')
getplots = function(data, batch_indicator = NA){
if(is.na(batch_indicator)) {
myplot =
ggplot(data) +
geom_point(aes(x = UMAP1, y = UMAP2, color = Cell.Type), size = 0.5) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
} else{
myplot =
ggplot(data) +
geom_point(aes_string(x = "UMAP1", y = "UMAP2", color = batch_indicator), size = 0.5) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
}
return(myplot)
}
methods = unique(genespaceARIs$Method)
UMAPs = list()
for(i in length(methods)) {
link = getlink(methods[i], type = 'HVG')
UMAP_data = read.csv(link, row.names = NULL)[-1]
UMAPs[[i]] = getplots(UMAP_data)
}
for(i in length(methods)) {
link = getlink(methods[i], type = 'HVG')
UMAP_data = read.csv(link, row.names = NULL)[-1]
UMAPs[[i +length(methods)]] = getplots(UMAP_data, batch_indicator = 'Sequencing.Method')
}
for(i in length(methods)) {
link = getlink(methods[i], type = 'LVG')
UMAP_data = read.csv(link, row.names = NULL)[-1]
UMAPs[[i + 2*length(methods)]] = getplots(UMAP_data)
}
for(i in length(methods)) {
link = getlink(methods[i], type = 'LVG')
UMAP_data = read.csv(link, row.names = NULL)[-1]
UMAPs[[i + 3*length(methods)]] = getplots(UMAP_data, batch_indicator = 'Sequencing.Method')
}
p2b=egg::ggarrange(plots=UMAPs,ncol = sum(genespaceARIs$Type == 'HVG'),draw = T)
p2b
UMAPs
for(i in length(methods)) {
link = getlink(methods[i], type = 'HVG')
link
UMAP_data = read.csv(link, row.names = NULL)[-1]
UMAPs[[i]] = getplots(UMAP_data)
}
for(i in length(methods)) {
link = getlink(methods[i], type = 'HVG')
print(link)
UMAP_data = read.csv(link, row.names = NULL)[-1]
UMAPs[[i]] = getplots(UMAP_data)
}
length(methods)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
suppressPackageStartupMessages(library(knitr))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(png))
suppressPackageStartupMessages(library(RANN))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(kableExtra))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(vioplot))
suppressPackageStartupMessages(library(RColorBrewer))
genespaceARIs = read.csv('genespaceARIs.csv')
genespaceARIs = rbind(genespaceARIs, read.csv('genespaceARIs_competitors.csv'))[-1]
getlink = function(method, type) paste0(method, "_", type, '.csv')
getplots = function(data, batch_indicator = NA){
if(is.na(batch_indicator)) {
myplot =
ggplot(data) +
geom_point(aes(x = UMAP1, y = UMAP2, color = Cell.Type), size = 0.5) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
} else{
myplot =
ggplot(data) +
geom_point(aes_string(x = "UMAP1", y = "UMAP2", color = batch_indicator), size = 0.5) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
}
return(myplot)
}
methods = unique(genespaceARIs$Method)
UMAPs = list()
for(i in c(1:length(methods))) {
link = getlink(methods[i], type = 'HVG')
print(link)
UMAP_data = read.csv(link, row.names = NULL)[-1]
UMAPs[[i]] = getplots(UMAP_data)
}
for(i in c(1:length(methods))) {
link = getlink(methods[i], type = 'HVG')
UMAP_data = read.csv(link, row.names = NULL)[-1]
UMAPs[[i +length(methods)]] = getplots(UMAP_data, batch_indicator = 'Sequencing.Method')
}
for(i in c(1:length(methods))) {
link = getlink(methods[i], type = 'LVG')
UMAP_data = read.csv(link, row.names = NULL)[-1]
UMAPs[[i + 2*length(methods)]] = getplots(UMAP_data)
}
for(i in c(1:length(methods))) {
link = getlink(methods[i], type = 'LVG')
UMAP_data = read.csv(link, row.names = NULL)[-1]
UMAPs[[i + 3*length(methods)]] = getplots(UMAP_data, batch_indicator = 'Sequencing.Method')
}
p2b=egg::ggarrange(plots=UMAPs,ncol = sum(genespaceARIs$Type == 'HVG'),draw = T)
p2b
UMAPs
p2b
p2b
help(ggarange)
